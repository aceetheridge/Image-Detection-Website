{"version":3,"sources":["components/ImageLink.js","components/Rank.js","components/PropsTile.js","components/Rectangle.js","components/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["ImageLink","onImageLinkChange","onSubmit","className","type","onChange","onClick","Rank","PropsTile","props","JSON","stringify","name","Rectangle","style","top","topRow","bottom","bottomRow","right","rightCol","left","leftCol","FaceRecognition","imageUrl","namesList","faceRec","Boxes","imageH","imageW","console","log","Draw","map","object","i","key","DrawBoxes","top_row","bottom_row","right_col","left_col","src","alt","id","AI","Clarifai","App","apiKey","calculateFaceLocation","data","boxList","outputs","regions","length","push","region_info","bounding_box","dispFace","imgh","Number","document","getElementById","height","imgw","width","setState","event","input","target","value","onRouteChange","route","state","models","initModel","GENERAL_MODEL","version","then","generalModel","predict","response","concepts","returnObjects","face","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.054b2f4e.chunk.js","sourcesContent":["import React from 'react';\nconst ImageLink = ({ onImageLinkChange, onSubmit}) => {\n    return (\n        <div className='cf flex flex-wrap justify-center ma3  '>\n            <input className=' pa2 input-reset ba bg-transparent hover-bg-black hover-white w-50' type='tex' onChange={onImageLinkChange} />\n            <button className='b w4 h3 input-reset ba b--black bg-transparent grow pointer f6 dib ma3' onClick={onSubmit}>Submit</button>\n        </div>\n    )\n}\nexport default ImageLink;","import React from 'react';\n\nconst Rank =() => {\n    return(\n\n        <div className='mt5'>\n            \n            <div className=''>\n                Copy and Paste a Url to an image in the search bar Below.\n            </div>\n        </div>\n    );\n}\n\nexport default Rank;","import React from 'react';\n\nconst PropsTile = (props) => {\n    return(\n        <div className=' w-20 ma3 shadow-2'>\n            <div className='tc flex items-center justify-center'>\n                <p>{(JSON.stringify(props.name))}</p>\n            </div>\n        </div>\n    );\n}\nexport default PropsTile;","import React from 'react';\nimport './shad.css';\n\n\nconst Rectangle = (props) => {\n    return(\n        <div className='absolute flex flex-wrap justify-center shad ' style={{top: (props.topRow) , bottom: props.bottomRow, right: props.rightCol, left: props.leftCol}}>\n           \n        </div>\n    );\n}\nexport default Rectangle;","import React from 'react';\nimport PropsTile from './PropsTile'\nimport Rectangle from './Rectangle'\n\n\n\nconst FaceRecognition = ({imageUrl, namesList, faceRec, Boxes, imageH, imageW}) => {\n    console.log(imageH, imageW);\n    const Draw = namesList.map((object , i) => {\n        return <PropsTile key={i} name={namesList[i].name}/>\n    });\n\n    const DrawBoxes = Boxes.map((object, i) =>{\n        return<Rectangle key={i} topRow={{...Boxes[i]}.top_row * imageH } \n        bottomRow={imageH - ({...Boxes[i]}.bottom_row * imageH)} \n        rightCol={imageW - ({...Boxes[i]}.right_col * imageW)} \n        leftCol={{...Boxes[i]}.left_col * imageW}/>\n    });\n\n    if(faceRec === false){\n        return(\n        <div className=' cf flex flex-wrap justify-center ma3'>\n            \n            <div className='br3 w-30 pa3'>\n                <img className='br3 shadow-1' src={imageUrl} alt='Your Image Should Appear Here' />\n                \n                \n            </div>\n            <div className=' w-50 pa3 '>\n                <div>Your image could be classified by the following traits.</div>\n                <div className='flex flex-wrap'>{Draw}</div>\n            </div>\n        </div>\n    )}\n    \n    else if(faceRec === true && Boxes != null){\n        // for(let i = 0; i<Boxes.length;i++){\n        //     console.log(Boxes[0].region_info.bounding_box.top_row)\n        //     let box = Boxes[i];\n        //     console.log(box.region_info.bounding_box.top_row);\n        // }\n        // console.log(Boxes[0].region_info.bounding_box.top_row);\n        \n\n        return(\n            <div className=' cf flex flex-wrap justify-center'>\n                <div className='br3  absolute'>\n                    <div className='ma3 f3'>Detecting Faces</div>\n                    <img id='inputimage' className=' br3' src={imageUrl} alt='Your Image Should Appear Here' />\n                    {DrawBoxes}\n                    {/* <div className='absolute shadow-1 flex flex-wrap justify-center' style={{top: Boxes.topRow}}></div> */}\n                </div>\n            </div>\n        );\n    }\n    };\n\n\nexport default FaceRecognition;","import React, {Component} from 'react';\nimport './App.css';\nimport NavigationBar  from './components/Navigation';\nimport ImageLink  from './components/ImageLink';\nimport Rank from './components/Rank';\nimport FaceRecognition from './components/FaceRecognition';\nimport 'tachyons';\nimport SignIn from './components/SignIn';\nimport Register from './components/Register';\nimport Clarifai from 'clarifai';\nconst AI = new Clarifai.App({apiKey: 'c94246448a1b46a89010cd39ad198241'});\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      namesList: [],\n      faceRec: false,\n      Boxes: [],\n      imageH: 0,\n      imageW: 0,\n      route: 'signin'\n    }\n  }\n\n  calculateFaceLocation = (data) =>{\n    let boxList = [];\n    \n    for(let i = 0; i < data.outputs[0].data.regions.length;i++){\n      boxList.push(data.outputs[0].data.regions[i].region_info.bounding_box);\n    }\n    return boxList;\n  };\n  \n  dispFace = (data)=>{\n    const imgh = Number(document.getElementById('inputimage').height);\n    const imgw = Number(document.getElementById('inputimage').width);\n    this.setState({Boxes: data});\n    this.setState({imageH: imgh});\n    this.setState({imageW: imgw});\n    };\n    \n\n  \n  onImageLinkChange = ( event ) => {\n    this.setState({input: event.target.value});\n  }\n  onRouteChange =(route) =>{\n    this.setState({route: route})\n  }\n  onSubmit =() =>{\n    \n    this.setState({imageUrl: this.state.input})\n    AI.models.initModel({id: Clarifai.GENERAL_MODEL, version: \"aa7f35c01e0642fda5cf400f543e7c40\"})\n      .then(generalModel => {\n        return generalModel.predict(this.state.input);\n      })\n      .then(response => {\n        var concepts = response['outputs'][0]['data']['concepts'];\n        let returnObjects = [];\n        let face = 0;\n        for(var i = 0; i< concepts.length;i++){\n          returnObjects.push(concepts[i]);\n          \n          if(concepts[i].name === \"face\" || concepts[i].name === \"man\" || concepts[i].name === \"woman\" ){\n             face = face + 1;\n          }\n          \n        };\n        AI.models.predict(\"a403429f2ddf4b49b307e318f00e528b\", this.state.input).then(response => {this.dispFace(this.calculateFaceLocation(response))},(err => {console.log(err)}));\n        this.setState({namesList: returnObjects})\n        if(face > 0){\n            \n          this.setState({faceRec: true})\n        }\n        else if(face === 0){\n          this.setState({faceRec: false})\n        }\n      });\n      \n    \n    \n  }\n  render(){\n    return (\n      <div className=\"App\">\n        {/* <NavigationBar onRouteChange={this.onRouteChange} />\n        {this.state.route ==='home' ?\n        <div>  */}\n          <Rank />\n          <ImageLink onImageLinkChange={this.onImageLinkChange} onSubmit={this.onSubmit}/>\n          <FaceRecognition imageUrl={this.state.imageUrl} namesList={this.state.namesList} \n            faceRec={this.state.faceRec} Boxes={this.state.Boxes} imageH={this.state.imageH} imageW={this.state.imageW}/>\n        {/* </div> : (this.state.route === 'signin'? */}\n         {/* <SignIn onRouteChange={this.onRouteChange} /> \n         : <Register onRouteChange={this.onRouteChange} />\n         )\n        } */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}